import torch
from sentence_transformers import SentenceTransformer
from app.config import settings
import logging

logger = logging.getLogger(__name__)

class EmbeddingService:
    def __init__(self):
        self.device = 'cuda' if torch.cuda.is_available() else 'cpu'
        logger.info(f"Инициализация embedding модели на устройстве: {self.device}")
        
        try:
            self.model = SentenceTransformer(
                settings.EMBEDDING_MODEL,
                device=self.device
            )
            logger.info(f"Embedding модель загружена: {settings.EMBEDDING_MODEL}")
        except Exception as e:
            logger.error(f"Ошибка загрузки embedding модели: {e}")
            raise

    def encode(self, texts: List[str]):
        """Генерация эмбеддингов для списка текстов"""
        try:
            embeddings = self.model.encode(
                texts,
                device=self.device,
                convert_to_tensor=True,
                show_progress_bar=False,
                batch_size=32
            )
            return embeddings.cpu().numpy().tolist()
        except Exception as e:
            logger.error(f"Ошибка генерации эмбеддингов: {e}")
            raise

    def cleanup(self):
        """Очистка памяти GPU"""
        if hasattr(self, 'model'):
            del self.model
        if torch.cuda.is_available():
            torch.cuda.empty_cache()
