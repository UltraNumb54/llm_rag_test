# predict.py
from flair.models import SequenceTagger
from flair.data import Sentence
from razdel import tokenize
import sys

# === –ö–û–ù–°–¢–ê–ù–¢–´ ===
MODEL_PATH = "ner_model/final-model.pt"
TEST_FILE = "test.txt"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø—É—Ç—å

def text_to_sentence(text: str) -> Sentence:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ Sentence —Å —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ razdel."""
    tokens = [t.text for t in tokenize(text)]
    sentence = Sentence()
    for token in tokens:
        sentence.add_token(token)
    return sentence

def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    tagger = SequenceTagger.load(MODEL_PATH)

    # –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    with open(TEST_FILE, "r", encoding="utf-8") as f:
        text = f.read()

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    sentence = text_to_sentence(text)

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    tagger.predict(sentence)

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ñ–∞–π–ª–∞: {TEST_FILE}\n")
    for entity in sentence.get_spans("ner"):
        print(f"[{entity.tag}] {entity.text} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {entity.score:.3f})")

if __name__ == "__main__":
    main()
